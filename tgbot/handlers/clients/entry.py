from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import (
    Message, ChatType, CallbackQuery
)

from tgbot.config import Config
from tgbot.data.commands import Commands, ButtonCommands
from tgbot.keyboards.inline import make_groups_inline_kb
from tgbot.keyboards.reply import (
    USER_START_COMMANDS, USER_GROUP_COMMANDS,
    ADMIN_GROUP_COMMANDS
)
from tgbot.misc.states import GroupsMenuState
from tgbot.models.admin import AdminGroupBot
from tgbot.models.client import BotClient, ClientSubscribe
from tgbot.utils.db import AsyncDbManager
from tgbot.utils.text import load_bot_feature_names, bot_feature_detail_info


async def user_start(message: Message):
    config: Config = message.bot['config']
    if message.from_user.id not in config.tg_bot.admin_ids:
        async with AsyncDbManager().db_session() as session:
            client = await BotClient.get_one(
                session, {'tg_id': message.from_user.id}
            )
            if not client:
                await BotClient.create(
                    session,
                    {
                        'tg_id': message.from_user.id,
                        'username': message.from_user.username,
                        'full_name': message.from_user.full_name
                    }
                )
    txt = (
            '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ãüõ°Ô∏è\n'
            '–ß—Ç–æ–±—ã –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É(–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
            '–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º), —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ –Ω–∞ –≤–∞—à —á–∞—Ç '
            '–Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /' + Commands.howto.name +
            '\n–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /'
            + Commands.features.name + '\n–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏' +
            '–Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /' + Commands.reboot.name
    )
    await message.reply(txt, reply_markup=USER_START_COMMANDS)


async def features(message: Message):
    inner = (
            '\n\n–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å –æ –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, '
            '–Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /' + Commands.fdetail.name
    )
    await message.answer('–§–∏—á–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ üí£üí£üí£\n\n' + '\n'.join(
        load_bot_feature_names()
    ) + inner)


async def features_detail(message: Message):
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ñ–∏—á–∏ üí£üí£\n\n' + '\n\n'.join(
        bot_feature_detail_info()
    ))


async def howto_setup(message: Message):
    txt = (
        '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É‚ùì\n',
        '1. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É',
        '2. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–º('
        '–¥–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –∫—Ä–æ–º–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏)',
        '3. –ù–∞–±–µ—Ä–∏—Ç–µ –≤ —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—É /' + Commands.add.name,
        '4. –ò –≤—Å—ë! –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–∏—Ö —á–∞—Ç–∞—Ö, –∏ –º–æ–∂–µ—Ç–µ '
        '–Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —á–∏—Å—Ç—ã–º —á–∞—Ç–æ–º üòá',
        '<strong>‚ùó‚ùó‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó‚ùó‚ùó\n–ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤ —á–∞—Ç–∞—Ö –Ω–µ '
        '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</>',
        '<strong>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –≤ –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ '
        '–Ω–∞ –∫–Ω–æ–ø–∫—É –ú–æ–∏ –≥—Ä—É–ø–ø—ã</>'
    )
    await message.answer('\n'.join(txt))


async def user_chats(message: Message):
    config: Config = message.bot['config']
    admin_user = message.from_user.id in config.tg_bot.admin_ids
    async with AsyncDbManager().db_session() as session:
        if admin_user:
            groups: list[AdminGroupBot] = await AdminGroupBot.get_all(
                session, {'admin_id': message.from_user.id}
            )
        else:
            groups: list[ClientSubscribe] = await ClientSubscribe.get_all(
                session, {'client_id': message.from_user.id}
            )
    if not groups:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø')
        return
    await GroupsMenuState.choose_group.set()
    keyboard = await make_groups_inline_kb(message.bot, groups)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–∞—Ç', reply_markup=keyboard)


async def user_chats_callback(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data)
    config: Config = callback.bot['config']
    admin_user = callback.from_user.id in config.tg_bot.admin_ids
    if admin_user:
        keyboard = ADMIN_GROUP_COMMANDS
    else:
        keyboard = USER_GROUP_COMMANDS
    await state.update_data(choose_group=group_id)
    await GroupsMenuState.group_actions.set()
    await callback.bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )
    await callback.bot.send_message(
        callback.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=keyboard
    )


def register_entry_handlers(dp: Dispatcher):
    dp.register_message_handler(
        user_start, commands=[Commands.start.name], state='*',
        commands_prefix='!/', chat_type=ChatType.PRIVATE
    )
    dp.register_message_handler(
        features, commands=[Commands.features.name], state='*',
        commands_prefix='!/',
    )
    dp.register_message_handler(
        features, text=ButtonCommands.bot_features.value,
        chat_type=ChatType.PRIVATE
    )
    dp.register_message_handler(
        howto_setup, commands=[Commands.howto.name], state='*',
        commands_prefix='!/',
    )
    dp.register_message_handler(
        howto_setup, text=ButtonCommands.howto_setup.value,
        chat_type=ChatType.PRIVATE
    )
    dp.register_message_handler(
        features_detail, commands=[Commands.fdetail.name], state='*',
        commands_prefix='!/',
    )
    dp.register_message_handler(
        features_detail, text=ButtonCommands.features_detail.value,
        chat_type=ChatType.PRIVATE
    )
    dp.register_message_handler(
        user_chats, state='*', text=ButtonCommands.my_groups.value,
        chat_type=ChatType.PRIVATE
    )
    dp.register_callback_query_handler(
        user_chats_callback, state=GroupsMenuState.choose_group,
        chat_type=ChatType.PRIVATE
    )
